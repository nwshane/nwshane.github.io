webpackJsonp([20942050224866],{496:function(n,a){n.exports={data:{markdownRemark:{html:'<p>The nature of <code class="language-text">undefined</code> in JavaScript can be a bit confusing at times. In this blog post, I\'m going to explore <code class="language-text">undefined</code> in the context of Arrays and Objects, in order to cast a bit of light on how it works.</p>\n<h2><code class="language-text">undefined</code> in Objects</h2>\n<p>Did you know that there\'s a difference in JavaScript between object properties that have not been defined, and object properties that are defined as <code class="language-text">undefined</code>?</p>\n<p>I\'ll explain what I mean. Take a look at the code below and see if you can figure out what it logs to the console:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'obj1.my_prop:\'</span><span class="token punctuation">,</span> obj1<span class="token punctuation">.</span>my_prop<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nobj2<span class="token punctuation">.</span>my_prop <span class="token operator">=</span> <span class="token keyword">undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'obj2.my_prop:\'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>my_prop<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Here\'s the answer:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">obj1.my_prop: undefined\nobj2.my_prop: undefined</code></pre>\n      </div>\n<p>Now read the below code. Does it log the same thing as above? Or perhaps nothing it all?</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'obj1.\'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">\':\'</span><span class="token punctuation">,</span> obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nobj2<span class="token punctuation">.</span>my_prop <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'obj2.\'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">\':\'</span><span class="token punctuation">,</span> obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>If you answered yes to either of the above questions, then... surprise! Nothing is logged for <code class="language-text">obj1</code>, but a line <em>is</em> logged for <code class="language-text">obj2</code>: <code class="language-text">obj2.my_prop: undefined</code></p>\n<p>Why does this happen? When you set a property on an object, JavaScript sees that property as an <em>enumerable</em> property, which means that it can be looped through by a <code class="language-text">for...in</code> loop. We can check this with the following code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'my_prop\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// => false</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nobj2<span class="token punctuation">.</span>my_prop <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">\'my_prop\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// => true</span></code></pre>\n      </div>\n<p>We can also see the enumerable properties of an object by logging the object itself:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// below logs are shown as output by node</span>\n\n<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>\n<span class="token comment">// {}</span>\n\n<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nobj2<span class="token punctuation">.</span>my_prop <span class="token operator">=</span> <span class="token keyword">undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>\n<span class="token comment">// { my_prop: undefined }</span></code></pre>\n      </div>\n<h2><code class="language-text">undefined</code> in Arrays</h2>\n<p>Working with <code class="language-text">undefined</code> in Arrays is similarly tricky. Let\'s start out with something easy. What does this log to the console?</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\narr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>This script logs <code class="language-text">undefined</code> three times. In all three cases—not initialized, initialized as <code class="language-text">undefined</code>, and out of range—accessing the array bucket value returns <code class="language-text">undefined</code>.</p>\n<p>What if we call <code class="language-text">forEach</code> on the below arrays and log their contents? Can you figure out what this script will log?</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\narr1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">arr1 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\narr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\narr2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">arr2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>This time, only a single line is logged: <code class="language-text">arr2 1. undefined</code></p>\n<p>The reason for this behavior is that <code class="language-text">forEach</code> ignores uninitialized values; this goes for other methods that iterate through an array as well, like <code class="language-text">map</code> and <code class="language-text">reduce</code>. However, these methods work for values that have been <em>initialized as undefined</em>, so our <code class="language-text">arr2[1]</code> value does end up getting logged.</p>\n<p>Another way to see this behavior is to log both arrays to the console:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// below logs are shown as output by node</span>\n\n<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>\n<span class="token comment">// [ &lt;3 empty items> ]</span>\n\n<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\narr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>\n<span class="token comment">// [ &lt;1 empty item>, undefined, &lt;1 empty item> ]</span></code></pre>\n      </div>\n<p>As you can see, JavaScript distinguishes between "empty" array buckets and "undefined" array buckets, even though accessing an "empty" array bucket will return <code class="language-text">undefined</code>. Craziness!</p>\n<p>Finally, let\'s look at a way to create an Array that is filled with <code class="language-text">undefined</code>, so that you can <code class="language-text">map</code> over it, for example. Credit goes to <a href="https://mail.mozilla.org/pipermail/es-discuss/2012-April/022273.html">Brandon Benvie</a> for this one.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\narr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">arr </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><code class="language-text">Array.apply</code> will fill any empty buckets in the array passed as the second argument with <code class="language-text">undefined</code>. The above code will log:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">arr 0. undefined\narr 1. undefined\narr 2. undefined</code></pre>\n      </div>\n<p>Fun side note: It doesn\'t actually matter what you use as the first argument of <code class="language-text">Array.apply</code>. You can replace <code class="language-text">null</code> with <code class="language-text">0</code>, <code class="language-text">&#39;hi&#39;</code>, or <code class="language-text">undefined</code>, and it will still return the same value.</p>\n<h2>When these details might matter</h2>\n<p>If you don\'t know the specifics about how <code class="language-text">undefined</code> works, it probably won\'t cause you too many problems. On <em>most</em> days, anyway. I didn\'t know about this stuff until recently, until I had to debug some failing <a href="https://firebase.google.com/">firebase</a> validations.</p>\n<p>Here\'s what happened. My database has a <code class="language-text">recordings</code> entity, and each <code class="language-text">recording</code> can have a <code class="language-text">year</code> field, which is not required but must be an integer if it\'s there. It turned out that I was destructuring a <code class="language-text">year</code> value from an object representing my form\'s input values, and then including it in the object I was sending to firebase.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// pseudocode</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>year<span class="token punctuation">}</span> <span class="token operator">=</span> formValues\n<span class="token comment">// ...other code</span>\n<span class="token function">updateFirebaseRecording</span><span class="token punctuation">(</span>recordingId<span class="token punctuation">,</span> <span class="token punctuation">{</span>year<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Can you see the problem there? When the year input was blank, the destructured <code class="language-text">year</code> variable was set to <code class="language-text">undefined</code>. By creating a new object with the <code class="language-text">{year}</code> syntax, I was sending an object to Firebase which included <code class="language-text">year: undefined</code>. Thus causing my validation to fail.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// it turns out that this code...</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>year<span class="token punctuation">}</span> <span class="token operator">=</span> formValues\n<span class="token function">updateFirebaseRecording</span><span class="token punctuation">(</span>recordingId<span class="token punctuation">,</span> <span class="token punctuation">{</span>year<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// is not the same as this:</span>\n<span class="token function">updateFirebaseRecording</span><span class="token punctuation">(</span>recordingId<span class="token punctuation">,</span> formValues<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>This kind of situation is what makes it worthwhile to learn the details of JavaScript.</p>',frontmatter:{title:'Let\'s Define "undefined"',date:"October 17, 2017",draft:null}}},pathContext:{slug:"let's-define-undefined"}}}});
//# sourceMappingURL=path---blog-lets-define-undefined-00a73a6c3d68f040e3c6.js.map